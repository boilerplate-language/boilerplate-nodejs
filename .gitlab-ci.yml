image: node:14-slim

cache:
  paths:
    - node_modules/

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  script:
    - npm ci
    - npm run build

test:
  stage: test
  script:
    - npm run coverage
  artifacts:
    when: always
    reports:
      junit: dist/report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

# eslint:
#   stage: test
#   script:
#     - npx eslint --format junit . > report.xml
#   artifacts:
#     when: always
#     reports:
#       junit: report.xml

outdated:
  stage: test
  allow_failure: true
  script:
    - npm outdated

sast:
  stage: test

publish:
  stage: publish
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/
  before_script:
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}">.npmrc
  script:
    - npm publish

jsdoc:
  stage: publish
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - npm run doc
  after_script:
    - tar -cvf public.tar.gz public/
  artifacts:
    name: doc
    paths:
      - public.tar.gz

dmd:
  stage: publish
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - npm run dmd
    - mkdir -p public/
    - mv api.md public/
  after_script:
    - tar -cvf public.tar.gz public/
  artifacts:
    name: dmd
    paths:
      - public.tar.gz

dockerize:
  stage: deploy
  image: docker:latest
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"

pages:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - echo 'Upload all report'
  artifacts:
    paths:
      - public
